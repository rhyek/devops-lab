# This workflow will build a docker container, publish it to Google Container Registry, and deploy it to GKE.
#
# To configure this workflow:
#
# 1. Ensure that your repository contains the necessary configuration for your Google Kubernetes Engine cluster, including deployment.yml, kustomization.yml, service.yml, etc.
#
# 2. Set up secrets in your workspace: GKE_PROJECT with the name of the project, GKE_EMAIL with the service account email, GKE_KEY with the service account key.
#
# 3. Change the values for the GKE_ZONE, GKE_CLUSTER and IMAGE environment variables (below).

name: Build and Deploy to GKE

on:
  push:
    branches:
      - master

# Environment variables available to all jobs and steps in this workflow
env:
  GKE_PROJECT: ${{ secrets.GKE_PROJECT }}
  GKE_EMAIL: ${{ secrets.GKE_EMAIL }}
  GITHUB_SHA: ${{ github.sha }}
  GKE_ZONE: us-central1-a
  GKE_CLUSTER: standard-cluster-1

jobs:
  phaseOne:
    name: Setup, Build, Publish, and Deploy
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@master

      # Setup gcloud CLI
      - uses: GoogleCloudPlatform/github-actions/setup-gcloud@master
        with:
          version: '270.0.0'
          service_account_email: ${{ secrets.GKE_EMAIL }}
          service_account_key: ${{ secrets.GKE_KEY }}

      # Configure docker to use the gcloud command-line tool as a credential helper
      - run: |
          # Set up docker to authenticate
          # via gcloud command-line tool.
          gcloud auth configure-docker

      # Build the Docker images
      - name: Build all
        run: |
          docker build -t devops-lab/builder -f ./cicd/builder.Dockerfile . | tee build.log
          echo "::set-env name=WEB_BUILD_HASH::$(grep -zoP '(?<=app-web: BUILD_HASH: )(.+)(?=\n)' ./build.log)"
          echo "::set-env name=TODOS_BUILD_HASH::$(grep -zoP '(?<=service-todos: BUILD_HASH: )(.+)(?=\n)' ./build.log)"
          gcloud container clusters get-credentials $GKE_CLUSTER --zone $GKE_ZONE --project $GKE_PROJECT

      - name: Obtain deployed build hashes
        run: |
          echo "::set-env name=DEPLOYED_WEB_BUILD_HASH::$(kubectl get deployment app-web -o jsonpath='{.metadata.annotations.buildHash}')"
          echo "::set-env name=DEPLOYED_TODOS_BUILD_HASH::$(kubectl get deployment service-todos -o jsonpath='{.metadata.annotations.buildHash}')"

      - name: Deploy Web
        if: env.WEB_BUILD_HASH != env.DEPLOYED_WEB_BUILD_HASH
        run: |
          docker build -t devops-lab/web -t gcr.io/$GKE_PROJECT/web:$GITHUB_SHA -t gcr.io/$GKE_PROJECT/web:latest -f ./src/app-web/Dockerfile .
          docker push gcr.io/$GKE_PROJECT/web
          kubectl set image deployments/app-web web=gcr.io/$GKE_PROJECT/web:$GITHUB_SHA
          kubectl annotate deployment app-web buildHash=$WEB_BUILD_HASH --overwrite

      - name: Deploy Todos
        if: env.TODOS_BUILD_HASH != env.DEPLOYED_TODOS_BUILD_HASH
        run: |
          docker build -t devops-lab/todos -t gcr.io/$GKE_PROJECT/todos:$GITHUB_SHA -t gcr.io/$GKE_PROJECT/todos:latest -f ./src/service-todos/Dockerfile .
          docker push gcr.io/$GKE_PROJECT/todos
          kubectl set image deployments/service-todos todos=gcr.io/$GKE_PROJECT/todos:$GITHUB_SHA
          kubectl annotate deployment service-todos buildHash=$TODOS_BUILD_HASH --overwrite
